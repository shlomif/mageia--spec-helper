#!/usr/bin/perl
#---------------------------------------------------------------
# Project         : Linux-Mandrake
# Module          : spec-helper
# File            : strip_files
# Version         : $Id$
# Author          : Frederic Lepied
# Created On      : Thu Feb 10 09:23:02 2000
# Purpose         : Strip files.
#---------------------------------------------------------------

use strict;
use warnings;
use File::Find;

################################################################################
# Check if a file is an elf binary, shared library, or static library,
# for use by File::Find. It'll fill the following 3 arrays with anything
# it finds:
my (@shared_libs, @executables, @static_libs);
my @exclude_files = ( 
    $ENV{EXCLUDE_FROM_STRIP} ? split(' ', $ENV{EXCLUDE_FROM_STRIP}) : (),
    "/usr/lib/debug"
);

# TODO: we should write a binding for libfile...
sub expensive_test {
    my ($file) = @_;
    my $type = `file -- $file`;
}

sub testfile() {
    local $_ = $_;
    return if -l $_ || -d $_; # Skip directories and symlinks always.
    my $fn = "$File::Find::dir/$_";

    # See if we were asked to exclude this file.
    # Note that we have to test on the full filename, including directory.
    foreach my $f (@exclude_files) {
        return if $fn =~ m/\Q$f\E/;
    }
    
    # Does its filename look like a shared library?
    if (m/\.so/) {
	# Ok, do the expensive test.
	if (expensive_test($_) =~ m/ELF.*shared/) {
	    push @executables, $fn;
	    return;
        }
    }
    
    # Is it executable? -x isn't good enough, so we need to use stat.
    my (undef, undef, $mode, undef) = stat(_);
    if ($mode & 0111) {
	# Ok, expensive test.
	if (expensive_test($_) =~ m/ELF.*executable/) {
	    push @executables, $fn;
	    return;
        }
    }
    
    # Is it a static library, and not a debug library?
    if (m/lib.*\.a/ && ! m/_g\.a/) {
        push @static_libs, $fn;
        return;
    }
}

################################################################################
my $buildroot = $ENV{RPM_BUILD_ROOT};
die "No build root defined" unless $buildroot;
die "Invalid build root" unless -d $buildroot;
chdir($buildroot) or die "Can't cd to $buildroot: $!";

@shared_libs = @executables = @static_libs = ();
find(\&testfile, $buildroot);

# Note that all calls to strip on shared libs *must* include the
# --strip-unneeded.
system(
    "strip",
    "--remove-section=.comment",
    "--remove-section=.note",
    "--strip-unneeded",
    $_) foreach @shared_libs;

system(
    "strip",
    "--remove-section=.comment",
    "--remove-section=.note",
    $_) foreach @executables;
